# to be able to configure hyper-v vm.
ENV['VAGRANT_EXPERIMENTAL'] = 'typed_triggers'

$domain = "example.com"
$domain_ip_address = "192.168.56.2"
$windows_ip_address = "192.168.56.3"
$ubuntu_ip_address = "192.168.56.4"

Vagrant.configure("2") do |config|
    config.vm.provider :libvirt do |lv, config|
        lv.cpus = 2
        lv.cpu_mode = 'host-passthrough'
        lv.keymap = 'pt'
    end

    config.vm.provider :hyperv do |hv, config|
        hv.linked_clone = true
        hv.enable_virtualization_extensions = false # nested virtualization.
        hv.cpus = 2
        hv.vlan_id = ENV['HYPERV_VLAN_ID']
        # set the management network adapter.
        # see https://github.com/hashicorp/vagrant/issues/7915
        # see https://github.com/hashicorp/vagrant/blob/10faa599e7c10541f8b7acf2f8a23727d4d44b6e/plugins/providers/hyperv/action/configure.rb#L21-L35
        config.vm.network :private_network,
            bridge: ENV['HYPERV_SWITCH_NAME'] if ENV['HYPERV_SWITCH_NAME']
        config.vm.synced_folder '.', '/vagrant',
            type: 'smb',
            smb_username: ENV['VAGRANT_SMB_USERNAME'] || ENV['USER'],
            smb_password: ENV['VAGRANT_SMB_PASSWORD']
        # further configure the VM (e.g. manage the network adapters).
        config.trigger.before :'VagrantPlugins::HyperV::Action::StartInstance', type: :action do |trigger|
            trigger.ruby do |env, machine|
                # see https://github.com/hashicorp/vagrant/blob/v2.2.10/lib/vagrant/machine.rb#L13
                # see https://github.com/hashicorp/vagrant/blob/v2.2.10/plugins/kernel_v2/config/vm.rb#L716
                bridges = machine.config.vm.networks.select{|type, options| type == :private_network && options.key?(:hyperv__bridge)}.map do |type, options|
                    mac_address_spoofing = false
                    mac_address_spoofing = options[:hyperv__mac_address_spoofing] if options.key?(:hyperv__mac_address_spoofing)
                    [options[:hyperv__bridge], mac_address_spoofing]
                end
                system(
                    'PowerShell',
                    '-NoLogo',
                    '-NoProfile',
                    '-ExecutionPolicy',
                    'Bypass',
                    '-File',
                    'provision/configure-hyperv-host.ps1',
                    machine.id,
                    bridges.to_json
                )
                raise "failed to configure hyper-v with exit code #{$?.exitstatus}" if $?.exitstatus != 0
            end
        end
    end

    config.vm.define "windows" do |config|
        config.vm.provider :libvirt do |lv, config|
            lv.memory = 2048
            # replace the default synced_folder with something that works in the base box.
            # NB for some reason, this does not work when placed in the base box Vagrantfile.
            config.vm.synced_folder '.', '/vagrant', type: 'smb', smb_username: ENV['USER'], smb_password: ENV['VAGRANT_SMB_PASSWORD']
        end
        config.vm.provider :hyperv do |hv, config|
            hv.memory = 2048
        end
        config.vm.box = "windows-2022-uefi-amd64"
        config.vm.hostname = "windows"
        config.vm.network "private_network",
            ip: $windows_ip_address,
            libvirt__forward_mode: "route",
            libvirt__dhcp_enabled: false,
            hyperv__bridge: "windows-domain-controller"
        config.vm.provision "shell", path: "provision/ps.ps1", args: ["configure-hyperv-guest.ps1", $windows_ip_address]
        config.vm.provision "windows-sysprep"
        config.vm.provision "shell", path: "provision/ps.ps1", args: "locale.ps1"
        config.vm.provision "shell", path: "provision/ps.ps1", args: ["add-to-domain.ps1", $domain, $domain_ip_address]
        config.vm.provision "shell", reboot: true
        config.vm.provision "shell", path: "provision/ps.ps1", args: "provision-powershell-activedirectory-module.ps1"
        config.vm.provision "shell", inline: "$env:chocolateyVersion='2.5.0'; Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1')", name: "Install Chocolatey"
        config.vm.provision "shell", path: "provision/ps.ps1", args: "provision-base.ps1"
        config.vm.provision "shell", path: "provision/ps.ps1", args: "provision-whoami-web.ps1"
    end

    config.vm.define "ubuntu" do |config|
        config.vm.provider :libvirt do |lv, config|
            lv.memory = 1024
            config.vm.synced_folder '.', '/vagrant', type: 'nfs', nfs_version: '4.2', nfs_udp: false
        end
        config.vm.provider :hyperv do |hv, config|
            hv.memory = 1024
        end
        config.vm.box = "ubuntu-22.04-uefi-amd64"
        config.vm.hostname = "ubuntu.#{$domain}"
        config.vm.network "private_network",
            ip: $ubuntu_ip_address,
            libvirt__forward_mode: "route",
            libvirt__dhcp_enabled: false,
            hyperv__bridge: "windows-domain-controller"
        config.vm.provision "shell", path: "provision/configure-hyperv-guest.sh", args: [$ubuntu_ip_address]
        config.vm.provision "shell", path: "provision/provision-base.sh"
        config.vm.provision "shell", path: "provision/add-to-domain.sh", args: [$domain, $domain_ip_address]
        config.vm.provision "reload"
    end

    config.trigger.before :up do |trigger|
        trigger.run = {
            inline: '''bash -euc \'
certs=(
    ../tmp/ExampleEnterpriseRootCA.der
)
for cert_path in "${certs[@]}"; do
    if [ -f $cert_path ]; then
        mkdir -p tmp
        cp $cert_path tmp
    fi
done
\'
'''
        }
    end
end
